import { AppSidebar } from "@/components/app-sidebar";
import { SiteHeader } from "@/components/site-header";
import { SidebarInset, SidebarProvider } from "@/components/ui/sidebar";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import {
  IconArrowLeft,
  IconExternalLink,
  IconShield,
  IconCalendar,
  IconAlertTriangle,
  IconBug,
  IconPackage,
  IconCode,
} from "@tabler/icons-react";
import Link from "next/link";

import vulnerableImagesData from "../../../data.json";
import vulnerabilitiesData from "../../vulnerabilities-data.json";

interface PageProps {
  params: {
    id: string;
    vulnerabilityId: string;
  };
}

function getSeverityBadgeVariant(severity: string) {
  switch (severity.toLowerCase()) {
    case "critical":
      return "destructive";
    case "high":
      return "secondary";
    case "medium":
      return "outline";
    case "low":
      return "default";
    default:
      return "outline";
  }
}

function getCvssScoreBadgeVariant(score: number) {
  if (score >= 9) return "destructive";
  if (score >= 7) return "secondary";
  if (score >= 4) return "outline";
  return "default";
}

function formatDate(dateString: string) {
  return new Date(dateString).toLocaleDateString("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
  });
}

export default function VulnerabilityDetailPage({ params }: PageProps) {
  const imageId = parseInt(params.id);
  const vulnerabilityId = params.vulnerabilityId;

  const image = vulnerableImagesData.find(
    (img: { id: number }) => img.id === imageId
  );
  const vulnerability = vulnerabilitiesData.find(
    (vuln: { id: string; imageId: number }) =>
      vuln.id === vulnerabilityId && vuln.imageId === imageId
  );

  if (!image || !vulnerability) {
    return (
      <div className="flex min-h-screen items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold">Vulnerability not found</h1>
          <Link href="/vulnerable-images">
            <Button variant="outline" className="mt-4">
              <IconArrowLeft className="mr-2 h-4 w-4" />
              Back to Images
            </Button>
          </Link>
        </div>
      </div>
    );
  }

  return (
    <SidebarProvider
      style={
        {
          "--sidebar-width": "calc(var(--spacing) * 72)",
          "--header-height": "calc(var(--spacing) * 12)",
        } as React.CSSProperties
      }
    >
      <AppSidebar variant="inset" />
      <SidebarInset>
        <SiteHeader />
        <div className="flex flex-1 flex-col">
          <div className="@container/main flex flex-1 flex-col gap-2">
            <div className="flex flex-col gap-4 py-4 md:gap-6 md:py-6">
              <div className="px-4 lg:px-6">
                {/* Navigation */}
                <div className="flex items-center gap-2 mb-6 text-sm text-muted-foreground">
                  <Link href="/vulnerable-images" className="hover:underline">
                    Vulnerable Images
                  </Link>
                  <span>/</span>
                  <Link
                    href={`/vulnerable-images/${imageId}`}
                    className="hover:underline"
                  >
                    {image.imageName}:{image.tag}
                  </Link>
                  <span>/</span>
                  <span className="text-foreground font-medium">
                    {vulnerability.id}
                  </span>
                </div>

                <div className="flex items-center gap-4 mb-6">
                  <Link href={`/vulnerable-images/${imageId}`}>
                    <Button variant="outline" size="sm">
                      <IconArrowLeft className="mr-2 h-4 w-4" />
                      Back to Image
                    </Button>
                  </Link>
                  <div className="flex flex-col gap-2">
                    <div className="flex items-center gap-3">
                      <h1 className="text-2xl font-bold font-mono">
                        {vulnerability.id}
                      </h1>
                      <Badge
                        variant={getSeverityBadgeVariant(
                          vulnerability.severity
                        )}
                        className="capitalize"
                      >
                        {vulnerability.severity}
                      </Badge>
                      {vulnerability.exploitAvailable && (
                        <Badge variant="destructive" className="gap-1">
                          <IconAlertTriangle className="h-3 w-3" />
                          Exploit Available
                        </Badge>
                      )}
                    </div>
                    <h2 className="text-lg text-muted-foreground">
                      {vulnerability.title}
                    </h2>
                  </div>
                </div>

                {/* Overview Cards */}
                <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4 mb-6">
                  <Card>
                    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                      <CardTitle className="text-sm font-medium">
                        CVSS Score
                      </CardTitle>
                      <IconShield className="h-4 w-4 text-muted-foreground" />
                    </CardHeader>
                    <CardContent>
                      <div className="flex items-center gap-2">
                        <Badge
                          variant={getCvssScoreBadgeVariant(
                            vulnerability.cvssScore
                          )}
                          className="text-lg font-bold px-3 py-1"
                        >
                          {vulnerability.cvssScore.toFixed(1)}
                        </Badge>
                      </div>
                      <p className="text-xs text-muted-foreground mt-1 font-mono">
                        {vulnerability.cvssVector}
                      </p>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                      <CardTitle className="text-sm font-medium">
                        EPSS Score
                      </CardTitle>
                      <IconBug className="h-4 w-4 text-muted-foreground" />
                    </CardHeader>
                    <CardContent>
                      <div className="text-2xl font-bold">
                        {(vulnerability.epssScore * 100).toFixed(1)}%
                      </div>
                      <p className="text-xs text-muted-foreground mt-1">
                        Exploit Probability
                      </p>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                      <CardTitle className="text-sm font-medium">
                        Published
                      </CardTitle>
                      <IconCalendar className="h-4 w-4 text-muted-foreground" />
                    </CardHeader>
                    <CardContent>
                      <div className="text-sm font-medium">
                        {formatDate(vulnerability.publishedDate)}
                      </div>
                      <p className="text-xs text-muted-foreground mt-1">
                        Modified: {formatDate(vulnerability.lastModifiedDate)}
                      </p>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                      <CardTitle className="text-sm font-medium">
                        Fix Available
                      </CardTitle>
                      <IconPackage className="h-4 w-4 text-muted-foreground" />
                    </CardHeader>
                    <CardContent>
                      <div className="text-2xl font-bold">
                        {vulnerability.fixAvailable ? "Yes" : "No"}
                      </div>
                      {vulnerability.fixAvailable && (
                        <p className="text-xs text-muted-foreground mt-1">
                          Fixed in: {vulnerability.package.fixedVersion}
                        </p>
                      )}
                    </CardContent>
                  </Card>
                </div>

                {/* Main Content */}
                <div className="grid gap-6 md:grid-cols-2">
                  {/* Description */}
                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <IconBug className="h-5 w-5" />
                        Description
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <p className="text-sm leading-relaxed">
                        {vulnerability.description}
                      </p>
                    </CardContent>
                  </Card>

                  {/* Package Information */}
                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <IconPackage className="h-5 w-5" />
                        Affected Package
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div>
                        <Label className="text-sm font-medium">
                          Package Name
                        </Label>
                        <p className="text-sm font-mono">
                          {vulnerability.package.name}
                        </p>
                      </div>
                      <div>
                        <Label className="text-sm font-medium">
                          Current Version
                        </Label>
                        <p className="text-sm font-mono">
                          {vulnerability.package.version}
                        </p>
                      </div>
                      {vulnerability.fixAvailable && (
                        <div>
                          <Label className="text-sm font-medium">
                            Fixed Version
                          </Label>
                          <p className="text-sm font-mono text-green-600 dark:text-green-400">
                            {vulnerability.package.fixedVersion}
                          </p>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                </div>

                {/* CVSS Vector Details */}
                <Card className="mt-6">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <IconCode className="h-5 w-5" />
                      CVSS Vector Breakdown
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="font-mono text-sm bg-muted p-3 rounded">
                      {vulnerability.cvssVector}
                    </div>
                    <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4 mt-4 text-sm">
                      <div>
                        <span className="font-medium">Attack Vector:</span>
                        <p className="text-muted-foreground">
                          {vulnerability.cvssVector.includes("AV:N")
                            ? "Network"
                            : vulnerability.cvssVector.includes("AV:L")
                            ? "Local"
                            : "Other"}
                        </p>
                      </div>
                      <div>
                        <span className="font-medium">Attack Complexity:</span>
                        <p className="text-muted-foreground">
                          {vulnerability.cvssVector.includes("AC:L")
                            ? "Low"
                            : vulnerability.cvssVector.includes("AC:H")
                            ? "High"
                            : "Other"}
                        </p>
                      </div>
                      <div>
                        <span className="font-medium">
                          Privileges Required:
                        </span>
                        <p className="text-muted-foreground">
                          {vulnerability.cvssVector.includes("PR:N")
                            ? "None"
                            : vulnerability.cvssVector.includes("PR:L")
                            ? "Low"
                            : vulnerability.cvssVector.includes("PR:H")
                            ? "High"
                            : "Other"}
                        </p>
                      </div>
                      <div>
                        <span className="font-medium">User Interaction:</span>
                        <p className="text-muted-foreground">
                          {vulnerability.cvssVector.includes("UI:N")
                            ? "None"
                            : vulnerability.cvssVector.includes("UI:R")
                            ? "Required"
                            : "Other"}
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                {/* References */}
                <Card className="mt-6">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <IconExternalLink className="h-5 w-5" />
                      References
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-2">
                      {vulnerability.references.map(
                        (ref: string, index: number) => (
                          <div key={index}>
                            <a
                              href={ref}
                              target="_blank"
                              rel="noopener noreferrer"
                              className="flex items-center gap-2 text-sm text-blue-600 hover:underline dark:text-blue-400"
                            >
                              <IconExternalLink className="h-3 w-3" />
                              {ref}
                            </a>
                          </div>
                        )
                      )}
                    </div>
                  </CardContent>
                </Card>

                {/* Actions */}
                <div className="flex gap-2 mt-6">
                  <Button>
                    <IconShield className="mr-2 h-4 w-4" />
                    Add to Allowlist
                  </Button>
                  <Button variant="outline">Mark as False Positive</Button>
                  <Button variant="outline">
                    <IconExternalLink className="mr-2 h-4 w-4" />
                    View in NVD
                  </Button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </SidebarInset>
    </SidebarProvider>
  );
}

function Label({
  children,
  className,
}: {
  children: React.ReactNode;
  className?: string;
}) {
  return <label className={className}>{children}</label>;
}
